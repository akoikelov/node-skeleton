#!/usr/bin/env node

/* Module Dependencies */
const app = require('../app');
const debug = require('debug')('cechackathon:server');
const https = require('https');
const http = require('http');
const fileSystem = require('fs');

/* Get ports from environment and store in Express */
const HTTPport = normalizePort(process.env.HTTP_PORT || '3000');
const HTTPSport = normalizePort(process.env.HTTPS_PORT || '9443');
app.set('HTTP_PORT', HTTPport);
app.set('HTTP_PORT', HTTPSport);

/* Create HTTPS Service */
const serverConfig = {
    key: fileSystem.readFileSync('cert/client-key.pem'),
    cert: fileSystem.readFileSync('cert/client-cert.pem')
};

/* Create HTTP and HTTPS Servers */
const httpServer = http.createServer(app).listen(HTTPport);
const httpsServer = https.createServer(serverConfig, app).listen(HTTPSport);

httpServer.on('error', onError);
httpsServer.on('error', onError);

httpServer.on('listening', () => {
    let addr = httpServer.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
});

httpsServer.on('listening', () => {
    let addr = httpServer.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
});

console.log('HTTP Listening on port ' + HTTPport);
console.log('HTTPS Listening on port ' + HTTPSport);


/* Normalize a port into a number, string, or false */
function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/* Event listener for HTTP server "error" event */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
