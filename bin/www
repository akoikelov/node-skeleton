#!/usr/bin/env node

/* Module Dependencies */
const app = require('../app');
const debug = require('debug')('cechackathon:server');
const https = require('https');
const http = require('http');
const fileSystem = require('fs');

if(!process.env.NODE_ENV) {
    console.log(`No NODE_ENV environment variable specified. Defaulting to 'development' environment.`);
}
else if(!['development', 'test', 'production'].includes(process.env.NODE_ENV)) {
    console.error(`Invalid NODE_ENV environment variable specified: ${process.env.NODE_ENV}.`);
    process.exit(1);
}

/* Configure HTTP Sever if Not ENFORCE_HTTPS*/
if(process.env.ENFORCE_HTTPS !== 'true') {
    const HTTPport = normalizePort(process.env.HTTP_PORT || '80');
    const httpServer = http.createServer(app).listen(HTTPport);
    httpServer.on('error', onError);
    httpServer.on('listening', () => {
        let addr = httpServer.address();
        let bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    });
    console.log('HTTP Listening on port ' + HTTPport);
}

/* Configure HTTPS Sever */
const HTTPSport = normalizePort(process.env.HTTPS_PORT || '443');
const serverConfig = {
    key: fileSystem.readFileSync(process.env.HTTPS_KEY_PATH || 'config/cert/client-key.pem'),
    cert: fileSystem.readFileSync(process.env.HTTPS_CERT_PATH || 'config/cert/client-cert.pem')
};
const httpsServer = https.createServer(serverConfig, app).listen(HTTPSport);
httpsServer.on('error', onError);
httpsServer.on('listening', () => {
    let addr = httpsServer.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
});

console.log('HTTPS Listening on port ' + HTTPSport);


/* Normalize a port into a number, string, or false */
function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/* Event listener for HTTP server "error" event */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
